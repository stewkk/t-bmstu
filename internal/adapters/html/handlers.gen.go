// Package html provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package html

import (
	"fmt"
	"html/template"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/labstack/echo/v4"
)

// CreatedSubmission defines model for CreatedSubmission.
type CreatedSubmission struct {
	Id   SubmissionId `json:"id"`
	Link *string      `json:"link,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Detail *string `json:"detail,omitempty"`
	Status int     `json:"status"`
	Title  string  `json:"title"`
}

// JudjeStatus defines model for JudjeStatus.
type JudjeStatus = string

// Problem defines model for Problem.
type Problem struct {
	Id        ProblemId     `json:"id"`
	Name      string        `json:"name"`
	Statement template.HTML `json:"statement"`
	Languages []string      `json:"statement"`
}

// ProblemId defines model for ProblemId.
type ProblemId = openapi_types.UUID

// Problems defines model for Problems.
type Problems struct {
	Items []struct {
		Id     ProblemId   `json:"id"`
		Link   string      `json:"link"`
		Name   string      `json:"name"`
		Status JudjeStatus `json:"status"`
	} `json:"items"`
}

// Submission defines model for Submission.
type Submission struct {
	Id         SubmissionId       `json:"id"`
	Language   SubmissionLanguage `json:"language"`
	ProblemId  ProblemId          `json:"problemId"`
	SourceCode string             `json:"sourceCode"`
	Status     JudjeStatus        `json:"status"`
}

// SubmissionId defines model for SubmissionId.
type SubmissionId = openapi_types.UUID

// SubmissionLanguage defines model for SubmissionLanguage.
type SubmissionLanguage = string

// SubmissionStatus defines model for SubmissionStatus.
type SubmissionStatus struct {
	Id        SubmissionId `json:"id"`
	ProblemId ProblemId    `json:"problemId"`
	Status    JudjeStatus  `json:"status"`
}

// SubmitBody defines model for SubmitBody.
type SubmitBody struct {
	Language   SubmissionLanguage `json:"language"`
	SourceCode string             `json:"sourceCode"`
}

// ProblemIdParameter defines model for ProblemIdParameter.
type ProblemIdParameter = ProblemId

// SubmissionIdParameter defines model for SubmissionIdParameter.
type SubmissionIdParameter = SubmissionId

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse = Error

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /problems)
	GetProblemsView(ctx echo.Context) error

	// (GET /problems/{problemId})
	GetProblemView(ctx echo.Context, problemId ProblemIdParameter) error

	// (GET /problems/{problemId}/submissions)
	GetSubmissionsView(ctx echo.Context, problemId ProblemIdParameter) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetProblemsView converts echo context to params.
func (w *ServerInterfaceWrapper) GetProblemsView(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProblemsView(ctx)
	return err
}

// GetProblemView converts echo context to params.
func (w *ServerInterfaceWrapper) GetProblemView(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "problemId" -------------
	var problemId ProblemIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "problemId", runtime.ParamLocationPath, ctx.Param("problemId"), &problemId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter problemId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProblemView(ctx, problemId)
	return err
}

// GetSubmissionsView converts echo context to params.
func (w *ServerInterfaceWrapper) GetSubmissionsView(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "problemId" -------------
	var problemId ProblemIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "problemId", runtime.ParamLocationPath, ctx.Param("problemId"), &problemId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter problemId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSubmissionsView(ctx, problemId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/problems", wrapper.GetProblemsView)
	router.GET(baseURL+"/problems/:problemId", wrapper.GetProblemView)
	router.GET(baseURL+"/problems/:problemId/submissions", wrapper.GetSubmissionsView)

}
