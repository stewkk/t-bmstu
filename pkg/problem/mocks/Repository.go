// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	problem "github.com/stewkk/t-bmstu/pkg/problem"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// GetProblem provides a mock function with given fields: _a0
func (_m *Repository) GetProblem(_a0 string) (problem.Problem, error) {
	ret := _m.Called(_a0)

	var r0 problem.Problem
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (problem.Problem, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) problem.Problem); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(problem.Problem)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetProblem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProblem'
type Repository_GetProblem_Call struct {
	*mock.Call
}

// GetProblem is a helper method to define mock.On call
//   - _a0 string
func (_e *Repository_Expecter) GetProblem(_a0 interface{}) *Repository_GetProblem_Call {
	return &Repository_GetProblem_Call{Call: _e.mock.On("GetProblem", _a0)}
}

func (_c *Repository_GetProblem_Call) Run(run func(_a0 string)) *Repository_GetProblem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Repository_GetProblem_Call) Return(_a0 problem.Problem, _a1 error) *Repository_GetProblem_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetProblem_Call) RunAndReturn(run func(string) (problem.Problem, error)) *Repository_GetProblem_Call {
	_c.Call.Return(run)
	return _c
}

// GetProblems provides a mock function with given fields:
func (_m *Repository) GetProblems() ([]problem.ProblemMeta, error) {
	ret := _m.Called()

	var r0 []problem.ProblemMeta
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]problem.ProblemMeta, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []problem.ProblemMeta); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]problem.ProblemMeta)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetProblems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProblems'
type Repository_GetProblems_Call struct {
	*mock.Call
}

// GetProblems is a helper method to define mock.On call
func (_e *Repository_Expecter) GetProblems() *Repository_GetProblems_Call {
	return &Repository_GetProblems_Call{Call: _e.mock.On("GetProblems")}
}

func (_c *Repository_GetProblems_Call) Run(run func()) *Repository_GetProblems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Repository_GetProblems_Call) Return(_a0 []problem.ProblemMeta, _a1 error) *Repository_GetProblems_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetProblems_Call) RunAndReturn(run func() ([]problem.ProblemMeta, error)) *Repository_GetProblems_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
